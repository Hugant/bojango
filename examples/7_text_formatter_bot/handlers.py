from bojango.action.manager import ActionManager
from bojango.core.routing import command, callback, message, audio, video_note
from bojango.action.screen import ActionScreen, ActionButton, ScreenType
from bojango.utils.format import TelegramTextFormatter


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@command('start')
async def start_command(update, context):
	await ActionManager.redirect('s_screen', update, context)


@callback('s_screen')
async def s_audio(update, context):
	tf = TelegramTextFormatter()

	tf.add_pre_replace(r'\*\*', '&&b')
	tf.add_pre_replace(r'\*', r'&&s')
	tf.add_pre_replace(r'_', r'&&u')
	tf.add_pre_replace(r'`', r'&&q')
	tf.add_pre_replace(r'```', r'&&mq')


	tf.add_literal('&&b', '&&b')
	tf.add_literal('&&u', '&&u')
	tf.add_literal('&&q', '&&q')
	tf.add_literal('&&mq', '&&mq')

	# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º Markdown-–∑–∞–≥–æ–ª–æ–≤–∫–∏
	tf.add_ignore('#####')
	tf.add_ignore('####')
	tf.add_ignore('###')
	tf.add_ignore('##')
	tf.add_ignore('#')

	# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Ä–∫–µ—Ä—ã –≤–∏–¥–∞ „Äê...„Äë
	tf.add_ignore_pattern(r'„Äê.*?„Äë')

	# –ü–æ—Å—Ç–∑–∞–º–µ–Ω—ã (–µ—Å–ª–∏ —Ö–æ—Ç–∏–º –≤–µ—Ä–Ω—É—Ç—å –¥–≤–æ–π–Ω—É—é –∑–≤—ë–∑–¥–æ—á–∫—É –∫ –æ–¥–∏–Ω–æ—á–Ω–æ–π)
	tf.add_post_replace(r'&&b', r'*')
	tf.add_post_replace(r'&&s', r'\*')
	tf.add_post_replace(r'&&u', r'_')
	tf.add_post_replace(r'&&q', r'`')
	tf.add_post_replace(r'&&mq', r'```')

	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 1: **bold A* text**'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 2: _italic *text_'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 3: __underline__'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 4: ~~strikethrough~~'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 5: ||spoiler||'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 6: *bold _italic bold ~italic bold strikethrough ||italic bold strikethrough spoiler||~ __underline italic bold___ bold*'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 7: [inline URL](http://www.example.com/)'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 8: [inline mention of a user](tg://user?id=hugant)'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 9: ![üëç](tg://emoji?id=5368324170671202286)'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 10: `inline fixed-width code`'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 11: ```pre-formatted fixed-width code block```'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 12: ```python pre-formatted fixed-width code block written in the Python programming language```'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 13: >Block quotation started'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 13: >Block quotation continued'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 14: **>The expandable block quotation started right after the previous block quotation'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 15: >The last line of the expandable block quotation with the expandability mark||'))
	#
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 1: –ê–ª–≥–æ—Ä–∏—Ç–º A* - –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö *–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö* –∞–ª–≥–æ—Ä–∏**—Ç–º–æ–≤'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 2: –≠—Ç–æ **–≤–∞–∂–Ω—ã–π** –º–æ–º–µ–Ω—Ç'))  # GPT-—Å—Ç–∏–ª—å
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 3: **–ú–æ—â–Ω–æ–µ** —Ä–µ—à–µ–Ω–∏–µ —Å **—Ä–∞–∑–º–µ—Ç–∫–æ–π**'))  # –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥—ã
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 4: –ü—Ä–æ—Å—Ç–æ *–∂–∏—Ä–Ω—ã–π* —Ç–µ–∫—Å—Ç –±–µ–∑ A*'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 5: A* –∏ *—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ*'))  # –∫–æ–º–±–æ
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 6: **A* –∏ *B***'))  # –æ–ø–∞—Å–Ω—ã–π —Å–ª–æ–º
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 7: [–°—Å—ã–ª–∫–∞](https://example.com) –∏ **—Ç–µ–∫—Å—Ç**'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 8: –≠—Ç–æ `–∫–æ–¥` –∏ **–≤–∞–∂–Ω–æ**'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 9: `–ö–æ–¥ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ *–≤–Ω—É—Ç—Ä–∏*`!'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 10: A*B*C –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'))
	yield ActionScreen(tf.format('–¢–µ—Å—Ç 11: –ö–æ–¥: ```python\nprint("Hello")\n def foo(a: str): return [int(a) * 3 + 4]{3}```'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 12: –ó–∞–≥–æ–ª–æ–≤–æ–∫ ### –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 13: **–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∂–∏—Ä–Ω—ã–π'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 14: –ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π _—ç–ª–µ–º–µ–Ω—Ç_'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 15: **–ñ–∏—Ä–Ω—ã–π** –∏ _–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π_ —Ä—è–¥–æ–º'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 16: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã A\\* –∏ \\*–Ω–µ—Ñ–æ—Ä–º–∞—Ç*'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 17: –ê–ª–≥–æ—Ä–∏—Ç–º D* ‚Äî –∏ *—Ç—É—Ç* —Ç–æ–∂–µ'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 18: –ö–æ–º–±–∏–Ω–∞—Ü–∏—è `–∫–æ–¥ *–≤–Ω—É—Ç—Ä–∏* —Ç–µ–∫—Å—Ç–∞` –∏ **–≤—ã–¥–µ–ª–µ–Ω–∏–µ**'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 19: **–ñ–∏—Ä–Ω—ã–π, –Ω–æ —Å A* –≤–Ω—É—Ç—Ä–∏**'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 20: –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏'))
	# yield ActionScreen(tf.format('–¢–µ—Å—Ç 21: 2 + 2 = 4'))


